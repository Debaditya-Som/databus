#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var debug = require('debug')('databus-server:server');
const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;
var initialize = require('./app/init');
const Constants = require('./app/common/constants');
const DatabusUserDatabase = require('./userdb');
var userTablePath = __dirname + '/users/namespaces.csv';
/**
 * Get port from environment and store in Express.
 */


if (cluster.isMaster) {
  masterProcess();
} else {
  childProcess();
}

function broadcast(msg) {
  Object.keys(cluster.workers).forEach(function (id) {
    cluster.workers[id].send(msg);
  });
}

function masterProcess() {

  console.log(`######`);
  console.log(`#     #   ##   #####   ##   #####  #    #  ####`);
  console.log(`#     #  #  #    #    #  #  #    # #    # #`);
  console.log(`#     # #    #   #   #    # #####  #    #  ####`);
  console.log(`#     # ######   #   ###### #    # #    #      #`);
  console.log(`#     # #    #   #   #    # #    # #    # #    #`);
  console.log(`######  #    #   #   #    # #####   ####   ####`);
  console.log(``)
  console.log(`================================================`);
 

  var userDatabase = new DatabusUserDatabase(userTablePath, function(table) {
    broadcast({ id : Constants.DATABUS_USER_CACHE_REFRESH, body: table });
  })

  initialize().then(function () {

    var numCPUs = 1;
    
    console.log(`Number of CPUs is ${numCPUs}`);
    console.log(`Master ${process.pid} is running`);

    console.log(`================================================`);

    for (let i = 0; i < numCPUs; i++) {
      console.log(`Forking process number ${i}...`);
      var fork = cluster.fork();

      fork.on('message', function (message) {
        if(message.id == Constants.DATABUS_USER_ENTRY_UPDATE) {
          userDatabase.updateUser(JSON.parse(message.body));
        }
      });
    }

    cluster.on('exit', (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
      console.log("Forking another worker!");
      cluster.fork();
    });



  }, function (err) {
    console.log(`Initialization error: \n${err}`);
  });

}

function childProcess() {
  console.log(`Worker ${process.pid} started...`);

  var app = require('./app/app');
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', function () {
    console.log(`Worker listening on port ${port}`);
  });
}




/**
 * Create HTTP server.
 */

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

