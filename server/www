#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var debug = require('debug')('databus-server:server');
const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;
var initialize = require('./init');
var Constants = require('./app/common/constants');
const LookupSearchIndexer = require('./search-indexer');
var searchIndexer = null;
var runTests = require('./app/tests.js');
const DatabusMessage = require('./app/common/databus-message');

initializeExtensions();

if (cluster.isMaster) {
  masterProcess();
} else {
  childProcess();
}

function broadcast(msg) {
  Object.keys(cluster.workers).forEach(function (id) {
    cluster.workers[id].send(msg);
  });
}

function createFork(onListening) {
  var fork = cluster.fork();

  if(onListening != undefined) {
    fork.on('listening', function(address) {
      onListening();
    });
  }

  fork.on('message', function (message) {
    if(message.id == DatabusMessage.NOTIFY_DATABUS_USER_ADDED) {
      broadcast({
        id : DatabusMessage.DATABUS_USER_ADDED,
        body : message.body
      });
    }

    if (message.id == Constants.DATABUS_SEARCH_INDEX_REBUILD) {
      searchIndexer.requestRebuild();
    }
  });
}

function masterProcess() {

  console.log(`######`);
  console.log(`#     #   ##   #####   ##   #####  #    #  ####`);
  console.log(`#     #  #  #    #    #  #  #    # #    # #`);
  console.log(`#     # #    #   #   #    # #####  #    #  ####`);
  console.log(`#     # ######   #   ###### #    # #    #      #`);
  console.log(`#     # #    #   #   #    # #    # #    # #    #`);
  console.log(`######  #    #   #   #    # #####   ####   ####`);
  console.log(``)
  console.log(`================================================`);


  // var userDatabase = new DatabusUserDatabase(userTablePath, function (table) {
  //  broadcast({ id: Constants.DATABUS_USER_CACHE_REFRESH, body: table });
  // });

  searchIndexer = new LookupSearchIndexer(5000);

  initialize().then(function () {

    console.log(`Number of CPUs is ${numCPUs}`);
    console.log(`Master ${process.pid} is running`);
    console.log(`================================================`);

    var numStartedWorkers = 0;

    for (let i = 0; i < numCPUs; i++) {
      console.log(`Forking process number ${i}...`);
      createFork(function() {
        numStartedWorkers++;
        if(numCPUs == numStartedWorkers) {
          console.log(`================================================`);
          console.log(`All workers started. Running tests...`);
          console.log(`================================================`);
          runTests();
        }
      });
    }

    cluster.on('exit', (worker, code, signal) => {
      console.log(`worker ${worker.process.pid} died`);
      console.log("Forking another worker!");
      createFork();
    });


  }, function (err) {
    console.log(`Initialization error: \n${err}`);
    process.exit(err ? 1 : 0)
  });

}

function childProcess() {
  console.log(`Worker ${process.pid} started...`);

  var app = require('./app/app');
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', function () {
    console.log(`Worker ${process.pid} listening on port ${port}`);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function initializeExtensions() {
  // add a sparql file loading extension (simply read the file as a string)
  require.extensions['.sparql'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };

  require.extensions['.sql'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };

  require.extensions['.md'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
  require.extensions['.ttl'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
  require.extensions['.html'] = function (module, filename) {
    module.exports = fs.readFileSync(filename, 'utf8');
  };
}